/*
 * generated by Xtext 2.22.0
 */
package at.ac.tuwien.big.ide.contentassist.antlr;

import at.ac.tuwien.big.ide.contentassist.antlr.internal.InternalSbsmlParser;
import at.ac.tuwien.big.services.SbsmlGrammarAccess;
import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class SbsmlParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(SbsmlGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, SbsmlGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getSmartSystemAccess().getAlternatives_4(), "rule__SmartSystem__Alternatives_4");
			builder.put(grammarAccess.getThingAccess().getAlternatives(), "rule__Thing__Alternatives");
			builder.put(grammarAccess.getThresholdAccess().getAlternatives(), "rule__Threshold__Alternatives");
			builder.put(grammarAccess.getArgAccess().getAlternatives(), "rule__Arg__Alternatives");
			builder.put(grammarAccess.getDataTypeAccess().getAlternatives(), "rule__DataType__Alternatives");
			builder.put(grammarAccess.getComparatorAccess().getAlternatives(), "rule__Comparator__Alternatives");
			builder.put(grammarAccess.getSmartSystemAccess().getGroup(), "rule__SmartSystem__Group__0");
			builder.put(grammarAccess.getSmartSystemAccess().getGroup_3(), "rule__SmartSystem__Group_3__0");
			builder.put(grammarAccess.getSmartSystemAccess().getGroup_3_2(), "rule__SmartSystem__Group_3_2__0");
			builder.put(grammarAccess.getSmartSystemAccess().getGroup_3_2_1(), "rule__SmartSystem__Group_3_2_1__0");
			builder.put(grammarAccess.getUnitAccess().getGroup(), "rule__Unit__Group__0");
			builder.put(grammarAccess.getUnitAccess().getGroup_1(), "rule__Unit__Group_1__0");
			builder.put(grammarAccess.getPortAccess().getGroup(), "rule__Port__Group__0");
			builder.put(grammarAccess.getSensorAccess().getGroup(), "rule__Sensor__Group__0");
			builder.put(grammarAccess.getSensorParamAccess().getGroup(), "rule__SensorParam__Group__0");
			builder.put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
			builder.put(grammarAccess.getActuatorAccess().getGroup(), "rule__Actuator__Group__0");
			builder.put(grammarAccess.getServiceAccess().getGroup(), "rule__Service__Group__0");
			builder.put(grammarAccess.getServiceAccess().getGroup_3(), "rule__Service__Group_3__0");
			builder.put(grammarAccess.getServiceAccess().getGroup_3_1(), "rule__Service__Group_3_1__0");
			builder.put(grammarAccess.getServiceAccess().getGroup_5(), "rule__Service__Group_5__0");
			builder.put(grammarAccess.getFogDeviceAccess().getGroup(), "rule__FogDevice__Group__0");
			builder.put(grammarAccess.getConfigAccess().getGroup(), "rule__Config__Group__0");
			builder.put(grammarAccess.getConfigAccess().getGroup_4(), "rule__Config__Group_4__0");
			builder.put(grammarAccess.getConfigAccess().getGroup_4_4(), "rule__Config__Group_4_4__0");
			builder.put(grammarAccess.getNodeAccess().getGroup(), "rule__Node__Group__0");
			builder.put(grammarAccess.getConnectionAccess().getGroup(), "rule__Connection__Group__0");
			builder.put(grammarAccess.getControllerAccess().getGroup(), "rule__Controller__Group__0");
			builder.put(grammarAccess.getControllerAccess().getGroup_13(), "rule__Controller__Group_13__0");
			builder.put(grammarAccess.getControllerAccess().getGroup_18(), "rule__Controller__Group_18__0");
			builder.put(grammarAccess.getIntThresholdAccess().getGroup(), "rule__IntThreshold__Group__0");
			builder.put(grammarAccess.getFloatThresholdAccess().getGroup(), "rule__FloatThreshold__Group__0");
			builder.put(grammarAccess.getBoolThresholdAccess().getGroup(), "rule__BoolThreshold__Group__0");
			builder.put(grammarAccess.getServiceCallAccess().getGroup(), "rule__ServiceCall__Group__0");
			builder.put(grammarAccess.getServiceCallAccess().getGroup_4(), "rule__ServiceCall__Group_4__0");
			builder.put(grammarAccess.getServiceCallAccess().getGroup_4_1(), "rule__ServiceCall__Group_4_1__0");
			builder.put(grammarAccess.getSmartSystemAccess().getNameAssignment_1(), "rule__SmartSystem__NameAssignment_1");
			builder.put(grammarAccess.getSmartSystemAccess().getUnitsAssignment_3_2_0(), "rule__SmartSystem__UnitsAssignment_3_2_0");
			builder.put(grammarAccess.getSmartSystemAccess().getUnitsAssignment_3_2_1_1(), "rule__SmartSystem__UnitsAssignment_3_2_1_1");
			builder.put(grammarAccess.getSmartSystemAccess().getThingsAssignment_4_0(), "rule__SmartSystem__ThingsAssignment_4_0");
			builder.put(grammarAccess.getSmartSystemAccess().getConfigsAssignment_4_1(), "rule__SmartSystem__ConfigsAssignment_4_1");
			builder.put(grammarAccess.getUnitAccess().getNameAssignment_0(), "rule__Unit__NameAssignment_0");
			builder.put(grammarAccess.getUnitAccess().getAbbreviationAssignment_1_1(), "rule__Unit__AbbreviationAssignment_1_1");
			builder.put(grammarAccess.getUnitAccess().getTypeAssignment_3(), "rule__Unit__TypeAssignment_3");
			builder.put(grammarAccess.getPortAccess().getSingleConnectionAssignment_0(), "rule__Port__SingleConnectionAssignment_0");
			builder.put(grammarAccess.getPortAccess().getNameAssignment_2(), "rule__Port__NameAssignment_2");
			builder.put(grammarAccess.getSensorAccess().getNameAssignment_1(), "rule__Sensor__NameAssignment_1");
			builder.put(grammarAccess.getSensorAccess().getShortNameAssignment_3(), "rule__Sensor__ShortNameAssignment_3");
			builder.put(grammarAccess.getSensorAccess().getPortsAssignment_6(), "rule__Sensor__PortsAssignment_6");
			builder.put(grammarAccess.getSensorAccess().getParametersAssignment_7(), "rule__Sensor__ParametersAssignment_7");
			builder.put(grammarAccess.getSensorParamAccess().getNameAssignment_1(), "rule__SensorParam__NameAssignment_1");
			builder.put(grammarAccess.getSensorParamAccess().getUnitAssignment_3(), "rule__SensorParam__UnitAssignment_3");
			builder.put(grammarAccess.getParameterAccess().getNameAssignment_0(), "rule__Parameter__NameAssignment_0");
			builder.put(grammarAccess.getParameterAccess().getUnitAssignment_2(), "rule__Parameter__UnitAssignment_2");
			builder.put(grammarAccess.getActuatorAccess().getNameAssignment_1(), "rule__Actuator__NameAssignment_1");
			builder.put(grammarAccess.getActuatorAccess().getShortNameAssignment_3(), "rule__Actuator__ShortNameAssignment_3");
			builder.put(grammarAccess.getActuatorAccess().getPortsAssignment_6(), "rule__Actuator__PortsAssignment_6");
			builder.put(grammarAccess.getActuatorAccess().getServicesAssignment_7(), "rule__Actuator__ServicesAssignment_7");
			builder.put(grammarAccess.getServiceAccess().getNameAssignment_1(), "rule__Service__NameAssignment_1");
			builder.put(grammarAccess.getServiceAccess().getParametersAssignment_3_0(), "rule__Service__ParametersAssignment_3_0");
			builder.put(grammarAccess.getServiceAccess().getParametersAssignment_3_1_1(), "rule__Service__ParametersAssignment_3_1_1");
			builder.put(grammarAccess.getServiceAccess().getDescriptionAssignment_5_1(), "rule__Service__DescriptionAssignment_5_1");
			builder.put(grammarAccess.getFogDeviceAccess().getNameAssignment_1(), "rule__FogDevice__NameAssignment_1");
			builder.put(grammarAccess.getFogDeviceAccess().getShortNameAssignment_3(), "rule__FogDevice__ShortNameAssignment_3");
			builder.put(grammarAccess.getFogDeviceAccess().getPortsAssignment_6(), "rule__FogDevice__PortsAssignment_6");
			builder.put(grammarAccess.getFogDeviceAccess().getMipsAssignment_9(), "rule__FogDevice__MipsAssignment_9");
			builder.put(grammarAccess.getConfigAccess().getNameAssignment_1(), "rule__Config__NameAssignment_1");
			builder.put(grammarAccess.getConfigAccess().getNodesAssignment_3(), "rule__Config__NodesAssignment_3");
			builder.put(grammarAccess.getConfigAccess().getConnectionsAssignment_4_3(), "rule__Config__ConnectionsAssignment_4_3");
			builder.put(grammarAccess.getConfigAccess().getConnectionsAssignment_4_4_1(), "rule__Config__ConnectionsAssignment_4_4_1");
			builder.put(grammarAccess.getConfigAccess().getControllersAssignment_5(), "rule__Config__ControllersAssignment_5");
			builder.put(grammarAccess.getNodeAccess().getNameAssignment_1(), "rule__Node__NameAssignment_1");
			builder.put(grammarAccess.getNodeAccess().getThingAssignment_3(), "rule__Node__ThingAssignment_3");
			builder.put(grammarAccess.getConnectionAccess().getNodeAAssignment_0(), "rule__Connection__NodeAAssignment_0");
			builder.put(grammarAccess.getConnectionAccess().getPortAAssignment_2(), "rule__Connection__PortAAssignment_2");
			builder.put(grammarAccess.getConnectionAccess().getNodeBAssignment_4(), "rule__Connection__NodeBAssignment_4");
			builder.put(grammarAccess.getConnectionAccess().getPortBAssignment_6(), "rule__Connection__PortBAssignment_6");
			builder.put(grammarAccess.getControllerAccess().getNameAssignment_1(), "rule__Controller__NameAssignment_1");
			builder.put(grammarAccess.getControllerAccess().getComputationNodeAssignment_4(), "rule__Controller__ComputationNodeAssignment_4");
			builder.put(grammarAccess.getControllerAccess().getMipsAssignment_8(), "rule__Controller__MipsAssignment_8");
			builder.put(grammarAccess.getControllerAccess().getThresholdAssignment_12(), "rule__Controller__ThresholdAssignment_12");
			builder.put(grammarAccess.getControllerAccess().getThresholdAssignment_13_1(), "rule__Controller__ThresholdAssignment_13_1");
			builder.put(grammarAccess.getControllerAccess().getServicecallsAssignment_18_0(), "rule__Controller__ServicecallsAssignment_18_0");
			builder.put(grammarAccess.getIntThresholdAccess().getSourceAssignment_2(), "rule__IntThreshold__SourceAssignment_2");
			builder.put(grammarAccess.getIntThresholdAccess().getParameterAssignment_4(), "rule__IntThreshold__ParameterAssignment_4");
			builder.put(grammarAccess.getIntThresholdAccess().getComperatorAssignment_5(), "rule__IntThreshold__ComperatorAssignment_5");
			builder.put(grammarAccess.getIntThresholdAccess().getValueAssignment_6(), "rule__IntThreshold__ValueAssignment_6");
			builder.put(grammarAccess.getFloatThresholdAccess().getSourceAssignment_2(), "rule__FloatThreshold__SourceAssignment_2");
			builder.put(grammarAccess.getFloatThresholdAccess().getParameterAssignment_4(), "rule__FloatThreshold__ParameterAssignment_4");
			builder.put(grammarAccess.getFloatThresholdAccess().getComperatorAssignment_5(), "rule__FloatThreshold__ComperatorAssignment_5");
			builder.put(grammarAccess.getFloatThresholdAccess().getValueAssignment_6(), "rule__FloatThreshold__ValueAssignment_6");
			builder.put(grammarAccess.getBoolThresholdAccess().getSourceAssignment_2(), "rule__BoolThreshold__SourceAssignment_2");
			builder.put(grammarAccess.getBoolThresholdAccess().getParameterAssignment_4(), "rule__BoolThreshold__ParameterAssignment_4");
			builder.put(grammarAccess.getBoolThresholdAccess().getTriggerOnAssignment_6(), "rule__BoolThreshold__TriggerOnAssignment_6");
			builder.put(grammarAccess.getServiceCallAccess().getNodeAssignment_0(), "rule__ServiceCall__NodeAssignment_0");
			builder.put(grammarAccess.getServiceCallAccess().getServiceAssignment_2(), "rule__ServiceCall__ServiceAssignment_2");
			builder.put(grammarAccess.getServiceCallAccess().getArgumentsAssignment_4_0(), "rule__ServiceCall__ArgumentsAssignment_4_0");
			builder.put(grammarAccess.getServiceCallAccess().getArgumentsAssignment_4_1_1(), "rule__ServiceCall__ArgumentsAssignment_4_1_1");
			builder.put(grammarAccess.getArgumentAccess().getStringValueAssignment(), "rule__Argument__StringValueAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private SbsmlGrammarAccess grammarAccess;

	@Override
	protected InternalSbsmlParser createParser() {
		InternalSbsmlParser result = new InternalSbsmlParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public SbsmlGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SbsmlGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
