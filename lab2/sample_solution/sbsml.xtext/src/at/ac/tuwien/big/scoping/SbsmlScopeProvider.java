/*
 * generated by Xtext 2.23.0.M2
 */
package at.ac.tuwien.big.scoping;

import java.util.List;
import java.util.stream.Collectors;

import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;

import sbsml.Configuration;
import sbsml.Connection;
import sbsml.Controller;
import sbsml.DataType;
import sbsml.FloatThreshold;
import sbsml.FogDevice;
import sbsml.IntThreshold;
import sbsml.Node;
import sbsml.SbsmlPackage;
import sbsml.Sensor;
import sbsml.Threshold;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
public class SbsmlScopeProvider extends AbstractDeclarativeScopeProvider {

	/**
	 * Show only Ports of the Thing of NodeA.
	 * @param connection
	 * @param eReference
	 * @return
	 */
	public IScope scope_Connection_portA(Connection connection, EReference eReference) {
		return eReference.equals(SbsmlPackage.Literals.CONNECTION__PORT_A) ? 
				Scopes.scopeFor(connection.getNodeA().getThing().getPorts()) :
				IScope.NULLSCOPE;
		
	}
	
	/**
	 * Show only Ports of the Thing of NodeB.
	 * @param connection
	 * @param eReference
	 * @return
	 */
	public IScope scope_Connection_portB(Connection connection, EReference eReference) {
		return eReference.equals(SbsmlPackage.Literals.CONNECTION__PORT_B) ? 
				Scopes.scopeFor(connection.getNodeB().getThing().getPorts()) :
				IScope.NULLSCOPE;
		
	}
	
	/**
	 * Show only Nodes of the correct Configuration and do not show NodeA of the Connection.
	 * @param connection
	 * @param eReference
	 * @return
	 */
	public IScope scope_Connection_nodeB(Connection connection, EReference eReference) {
		Configuration config = (Configuration) connection.eContainer();
		return eReference.equals(SbsmlPackage.Literals.CONNECTION__NODE_B) ? 
				Scopes.scopeFor(config.getNodes().stream()
						.filter(n -> n != connection.getNodeA())
						.collect(Collectors.toList())) :
				IScope.NULLSCOPE;
		
	}
	
	/**
	 * Show only Nodes in the correct Configuration that have a FogDevice as thing.
	 * @param controller
	 * @param eReference
	 * @return
	 */
	public IScope scope_Controller_computationNode(Controller controller, EReference eReference) {
		Configuration config = (Configuration) controller.eContainer();
		if (eReference.equals(SbsmlPackage.Literals.CONTROLLER__COMPUTATION_NODE)) {
			return Scopes.scopeFor(config.getNodes().stream()
					.filter(n -> n.getThing() instanceof FogDevice)
					.collect(Collectors.toList())
				);
		}
		return IScope.NULLSCOPE;
	}
	
	/**
	 * Show only Nodes of the correct Configuration that have a Sensor as thing and additionally contain
	 * a Parameter, which Unit has the corresponding DataType.
	 * @param threshold
	 * @param eReference
	 * @return
	 */
	public IScope scope_Threshold_source(Threshold threshold, EReference eReference) {
		Configuration config = (Configuration) threshold.eContainer().eContainer();
		DataType type = threshold instanceof IntThreshold ? DataType.INT
				: threshold instanceof FloatThreshold ? DataType.FLOAT : DataType.BOOL;
		List<Node> nodes = config.getNodes().stream()
				.filter(n -> n.getThing() instanceof Sensor)
				.filter(n -> ((Sensor)n.getThing()).getParameters().stream().filter(p -> p.getUnit().getType() == type).count() > 0)
				.collect(Collectors.toList());
		return eReference.equals(SbsmlPackage.Literals.THRESHOLD__SOURCE) ? 
				Scopes.scopeFor(nodes) :
				IScope.NULLSCOPE;
		
	}
	
	/**
	 * Only show Parameters of the Sensor of the source Node that Unit has the correct DataType.
	 * @param threshold
	 * @param eReference
	 * @return
	 */
	public IScope scope_Threshold_parameter(Threshold threshold, EReference eReference) {
		Sensor sensor = (Sensor) threshold.getSource().getThing();
		DataType type = threshold instanceof IntThreshold ? DataType.INT
				: threshold instanceof FloatThreshold ? DataType.FLOAT : DataType.BOOL;
		return eReference.equals(SbsmlPackage.Literals.THRESHOLD__PARAMETER) ? 
				Scopes.scopeFor(sensor.getParameters().stream()
						.filter(p -> p.getUnit().getType() == type)
						.collect(Collectors.toList())
						) :
				IScope.NULLSCOPE;
		
	}
	
}
