// automatically generated by Xtext
grammar at.ac.tuwien.big.Sbsml with org.eclipse.xtext.common.Terminals

import "http://big.tuwien.ac.at/sbsml" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

SmartSystem:
	'system' name=ID '{'
		('units' '{' (units+=Unit (',' units+=Unit)*)? '}')?
		(things+=Thing|configs+=Config)*
	'}'
;

Unit returns Unit:
	name=ID ('(' abbreviation=STRING ')')? ':' type=DataType
;

Thing returns Thing:
	Sensor|Actuator|FogDevice
;

Port returns Port:
	(singleConnection?='single')? 'port' name=ID
;

Sensor returns Sensor:
	'sensor' name=ID '(' shortName=ID ')' '{'
		(ports+=Port)*
		(parameters+=SensorParam)*
	'}'
;

SensorParam returns Parameter:
	'param' name=ID ':' unit=[Unit]
;

Parameter returns Parameter:
	name=ID ':' unit=[Unit]
;

Actuator returns Actuator:
	'actuator' name=ID '(' shortName=ID ')' '{'
		(ports+=Port)*
		(services+=Service)*
	'}'
;

Service returns Service:
	'service' name=ID '(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')' ('--' description=STRING)?
;

FogDevice returns FogDevice:
	'fogdevice' name=ID '(' shortName=ID ')' '{'
		(ports+=Port)*
		'mips' ':' mips=ELong
	'}'
;

Config returns Configuration:
	'config' name=ID '{'
		(nodes+=Node)*
		
		('connections' ':' '{' connections+=Connection (',' connections+=Connection)* '}')?
		
		(controllers+=Controller)*
	'}'
;

Node returns Node:
	'node' name=ID ':' thing=[Thing]
;

Connection returns Connection:
	nodeA=[Node] '.' portA=[Port] '>-<' nodeB=[Node] '.' portB=[Port]
;

Controller returns Controller:
	'controller' name=ID 'computed' 'on' computationNode=[Node] '{'
		'mips' ':' mips=ELong
		'on' ':' '{'
			threshold+=Threshold (',' threshold+=Threshold)*
		'}'
		'call' ':' '{'
			(servicecalls+=ServiceCall ';')*
		'}'
	'}'
;

Threshold returns Threshold:
	IntThreshold|FloatThreshold|BoolThreshold
;

IntThreshold returns IntThreshold:
	'IntThreshold' '(' source=[Node] '.' parameter=[Parameter] comperator=Comparator value=INT ')'
;

FloatThreshold returns FloatThreshold:
	'FloatThreshold' '(' source=[Node] '.' parameter=[Parameter] comperator=Comparator value=FLOAT ')'
;

BoolThreshold returns BoolThreshold:
	'BoolThreshold' '(' source=[Node] '.' parameter=[Parameter] '=' triggerOn=BOOL ')'
;

ServiceCall returns ServiceCall:
	node=[Node] '.' service=[Service] '(' (arguments+=Argument (',' arguments+=Argument)*)? ')'
;

Argument returns Argument:
	stringValue=Arg
;



Arg returns ecore::EString:
	INT|FLOAT|BOOL
;

ELong returns ecore::ELong:
	INT
;

enum DataType returns DataType:
				INT = 'int' | FLOAT = 'float' | BOOL = 'bool';
				
enum Comparator returns Comparator:
	GREATER = '>' | SMALLER = '<'
;

terminal FLOAT returns ecore::EDouble: '-'? ('0'..'9')* '.' ('0'..'9')+ (('E'|'e') '-'? ('0'..'9')+)?;
terminal BOOL returns ecore::EBoolean: ('true'|'false');

