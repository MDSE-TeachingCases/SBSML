/*
 * generated by Xtext 2.22.0
 */
package at.ac.tuwien.big.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SbsmlGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class SmartSystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Sbsml.SmartSystem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cUnitsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Assignment cUnitsAssignment_3_2_0 = (Assignment)cGroup_3_2.eContents().get(0);
		private final RuleCall cUnitsUnitParserRuleCall_3_2_0_0 = (RuleCall)cUnitsAssignment_3_2_0.eContents().get(0);
		private final Group cGroup_3_2_1 = (Group)cGroup_3_2.eContents().get(1);
		private final Keyword cCommaKeyword_3_2_1_0 = (Keyword)cGroup_3_2_1.eContents().get(0);
		private final Assignment cUnitsAssignment_3_2_1_1 = (Assignment)cGroup_3_2_1.eContents().get(1);
		private final RuleCall cUnitsUnitParserRuleCall_3_2_1_1_0 = (RuleCall)cUnitsAssignment_3_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cThingsAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cThingsThingParserRuleCall_4_0_0 = (RuleCall)cThingsAssignment_4_0.eContents().get(0);
		private final Assignment cConfigsAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cConfigsConfigParserRuleCall_4_1_0 = (RuleCall)cConfigsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SmartSystem:
		//	'system' name=ID '{' ('units' '{' (units+=Unit (',' units+=Unit)*)? '}')? (things+=Thing | configs+=Config)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'system' name=ID '{' ('units' '{' (units+=Unit (',' units+=Unit)*)? '}')? (things+=Thing | configs+=Config)* '}'
		public Group getGroup() { return cGroup; }
		
		//'system'
		public Keyword getSystemKeyword_0() { return cSystemKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('units' '{' (units+=Unit (',' units+=Unit)*)? '}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'units'
		public Keyword getUnitsKeyword_3_0() { return cUnitsKeyword_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }
		
		//(units+=Unit (',' units+=Unit)*)?
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//units+=Unit
		public Assignment getUnitsAssignment_3_2_0() { return cUnitsAssignment_3_2_0; }
		
		//Unit
		public RuleCall getUnitsUnitParserRuleCall_3_2_0_0() { return cUnitsUnitParserRuleCall_3_2_0_0; }
		
		//(',' units+=Unit)*
		public Group getGroup_3_2_1() { return cGroup_3_2_1; }
		
		//','
		public Keyword getCommaKeyword_3_2_1_0() { return cCommaKeyword_3_2_1_0; }
		
		//units+=Unit
		public Assignment getUnitsAssignment_3_2_1_1() { return cUnitsAssignment_3_2_1_1; }
		
		//Unit
		public RuleCall getUnitsUnitParserRuleCall_3_2_1_1_0() { return cUnitsUnitParserRuleCall_3_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_3() { return cRightCurlyBracketKeyword_3_3; }
		
		//(things+=Thing | configs+=Config)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//things+=Thing
		public Assignment getThingsAssignment_4_0() { return cThingsAssignment_4_0; }
		
		//Thing
		public RuleCall getThingsThingParserRuleCall_4_0_0() { return cThingsThingParserRuleCall_4_0_0; }
		
		//configs+=Config
		public Assignment getConfigsAssignment_4_1() { return cConfigsAssignment_4_1; }
		
		//Config
		public RuleCall getConfigsConfigParserRuleCall_4_1_0() { return cConfigsConfigParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class UnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Sbsml.Unit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAbbreviationAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAbbreviationSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cAbbreviationAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeDataTypeEnumRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//Unit:
		//	name=ID ('(' abbreviation=STRING ')')? ':' type=DataType;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ('(' abbreviation=STRING ')')? ':' type=DataType
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//('(' abbreviation=STRING ')')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//abbreviation=STRING
		public Assignment getAbbreviationAssignment_1_1() { return cAbbreviationAssignment_1_1; }
		
		//STRING
		public RuleCall getAbbreviationSTRINGTerminalRuleCall_1_1_0() { return cAbbreviationSTRINGTerminalRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=DataType
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//DataType
		public RuleCall getTypeDataTypeEnumRuleCall_3_0() { return cTypeDataTypeEnumRuleCall_3_0; }
	}
	public class ThingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Sbsml.Thing");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSensorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cActuatorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFogDeviceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Thing:
		//	Sensor | Actuator | FogDevice;
		@Override public ParserRule getRule() { return rule; }
		
		//Sensor | Actuator | FogDevice
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Sensor
		public RuleCall getSensorParserRuleCall_0() { return cSensorParserRuleCall_0; }
		
		//Actuator
		public RuleCall getActuatorParserRuleCall_1() { return cActuatorParserRuleCall_1; }
		
		//FogDevice
		public RuleCall getFogDeviceParserRuleCall_2() { return cFogDeviceParserRuleCall_2; }
	}
	public class PortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Sbsml.Port");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSingleConnectionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cSingleConnectionSingleKeyword_0_0 = (Keyword)cSingleConnectionAssignment_0.eContents().get(0);
		private final Keyword cPortKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Port:
		//	singleConnection?='single'? 'port' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//singleConnection?='single'? 'port' name=ID
		public Group getGroup() { return cGroup; }
		
		//singleConnection?='single'?
		public Assignment getSingleConnectionAssignment_0() { return cSingleConnectionAssignment_0; }
		
		//'single'
		public Keyword getSingleConnectionSingleKeyword_0_0() { return cSingleConnectionSingleKeyword_0_0; }
		
		//'port'
		public Keyword getPortKeyword_1() { return cPortKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class SensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Sbsml.Sensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSensorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cShortNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cShortNameIDTerminalRuleCall_3_0 = (RuleCall)cShortNameAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cPortsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPortsPortParserRuleCall_6_0 = (RuleCall)cPortsAssignment_6.eContents().get(0);
		private final Assignment cParametersAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cParametersSensorParamParserRuleCall_7_0 = (RuleCall)cParametersAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Sensor:
		//	'sensor' name=ID '(' shortName=ID ')' '{'
		//	ports+=Port*
		//	parameters+=SensorParam*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'sensor' name=ID '(' shortName=ID ')' '{' ports+=Port* parameters+=SensorParam* '}'
		public Group getGroup() { return cGroup; }
		
		//'sensor'
		public Keyword getSensorKeyword_0() { return cSensorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//shortName=ID
		public Assignment getShortNameAssignment_3() { return cShortNameAssignment_3; }
		
		//ID
		public RuleCall getShortNameIDTerminalRuleCall_3_0() { return cShortNameIDTerminalRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//ports+=Port*
		public Assignment getPortsAssignment_6() { return cPortsAssignment_6; }
		
		//Port
		public RuleCall getPortsPortParserRuleCall_6_0() { return cPortsPortParserRuleCall_6_0; }
		
		//parameters+=SensorParam*
		public Assignment getParametersAssignment_7() { return cParametersAssignment_7; }
		
		//SensorParam
		public RuleCall getParametersSensorParamParserRuleCall_7_0() { return cParametersSensorParamParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class SensorParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Sbsml.SensorParam");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParamKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cUnitAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cUnitUnitCrossReference_3_0 = (CrossReference)cUnitAssignment_3.eContents().get(0);
		private final RuleCall cUnitUnitIDTerminalRuleCall_3_0_1 = (RuleCall)cUnitUnitCrossReference_3_0.eContents().get(1);
		
		//SensorParam Parameter:
		//	'param' name=ID ':' unit=[Unit];
		@Override public ParserRule getRule() { return rule; }
		
		//'param' name=ID ':' unit=[Unit]
		public Group getGroup() { return cGroup; }
		
		//'param'
		public Keyword getParamKeyword_0() { return cParamKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//unit=[Unit]
		public Assignment getUnitAssignment_3() { return cUnitAssignment_3; }
		
		//[Unit]
		public CrossReference getUnitUnitCrossReference_3_0() { return cUnitUnitCrossReference_3_0; }
		
		//ID
		public RuleCall getUnitUnitIDTerminalRuleCall_3_0_1() { return cUnitUnitIDTerminalRuleCall_3_0_1; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Sbsml.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cUnitAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cUnitUnitCrossReference_2_0 = (CrossReference)cUnitAssignment_2.eContents().get(0);
		private final RuleCall cUnitUnitIDTerminalRuleCall_2_0_1 = (RuleCall)cUnitUnitCrossReference_2_0.eContents().get(1);
		
		//Parameter:
		//	name=ID ':' unit=[Unit];
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' unit=[Unit]
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//unit=[Unit]
		public Assignment getUnitAssignment_2() { return cUnitAssignment_2; }
		
		//[Unit]
		public CrossReference getUnitUnitCrossReference_2_0() { return cUnitUnitCrossReference_2_0; }
		
		//ID
		public RuleCall getUnitUnitIDTerminalRuleCall_2_0_1() { return cUnitUnitIDTerminalRuleCall_2_0_1; }
	}
	public class ActuatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Sbsml.Actuator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActuatorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cShortNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cShortNameIDTerminalRuleCall_3_0 = (RuleCall)cShortNameAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cPortsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPortsPortParserRuleCall_6_0 = (RuleCall)cPortsAssignment_6.eContents().get(0);
		private final Assignment cServicesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cServicesServiceParserRuleCall_7_0 = (RuleCall)cServicesAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Actuator:
		//	'actuator' name=ID '(' shortName=ID ')' '{'
		//	ports+=Port*
		//	services+=Service*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'actuator' name=ID '(' shortName=ID ')' '{' ports+=Port* services+=Service* '}'
		public Group getGroup() { return cGroup; }
		
		//'actuator'
		public Keyword getActuatorKeyword_0() { return cActuatorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//shortName=ID
		public Assignment getShortNameAssignment_3() { return cShortNameAssignment_3; }
		
		//ID
		public RuleCall getShortNameIDTerminalRuleCall_3_0() { return cShortNameIDTerminalRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//ports+=Port*
		public Assignment getPortsAssignment_6() { return cPortsAssignment_6; }
		
		//Port
		public RuleCall getPortsPortParserRuleCall_6_0() { return cPortsPortParserRuleCall_6_0; }
		
		//services+=Service*
		public Assignment getServicesAssignment_7() { return cServicesAssignment_7; }
		
		//Service
		public RuleCall getServicesServiceParserRuleCall_7_0() { return cServicesServiceParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class ServiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Sbsml.Service");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cServiceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParametersParameterParserRuleCall_3_0_0 = (RuleCall)cParametersAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_3_1_1_0 = (RuleCall)cParametersAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cHyphenMinusHyphenMinusKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cDescriptionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_5_1_0 = (RuleCall)cDescriptionAssignment_5_1.eContents().get(0);
		
		//Service:
		//	'service' name=ID '(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')' ('--' description=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'service' name=ID '(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')' ('--' description=STRING)?
		public Group getGroup() { return cGroup; }
		
		//'service'
		public Keyword getServiceKeyword_0() { return cServiceKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(parameters+=Parameter (',' parameters+=Parameter)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_3_0() { return cParametersAssignment_3_0; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_3_0_0() { return cParametersParameterParserRuleCall_3_0_0; }
		
		//(',' parameters+=Parameter)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_3_1_1() { return cParametersAssignment_3_1_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_3_1_1_0() { return cParametersParameterParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//('--' description=STRING)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'--'
		public Keyword getHyphenMinusHyphenMinusKeyword_5_0() { return cHyphenMinusHyphenMinusKeyword_5_0; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_5_1() { return cDescriptionAssignment_5_1; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_5_1_0() { return cDescriptionSTRINGTerminalRuleCall_5_1_0; }
	}
	public class FogDeviceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Sbsml.FogDevice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFogdeviceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cShortNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cShortNameIDTerminalRuleCall_3_0 = (RuleCall)cShortNameAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cPortsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPortsPortParserRuleCall_6_0 = (RuleCall)cPortsAssignment_6.eContents().get(0);
		private final Keyword cMipsKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cColonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cMipsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cMipsELongParserRuleCall_9_0 = (RuleCall)cMipsAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//FogDevice:
		//	'fogdevice' name=ID '(' shortName=ID ')' '{'
		//	ports+=Port*
		//	'mips' ':' mips=ELong
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'fogdevice' name=ID '(' shortName=ID ')' '{' ports+=Port* 'mips' ':' mips=ELong '}'
		public Group getGroup() { return cGroup; }
		
		//'fogdevice'
		public Keyword getFogdeviceKeyword_0() { return cFogdeviceKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//shortName=ID
		public Assignment getShortNameAssignment_3() { return cShortNameAssignment_3; }
		
		//ID
		public RuleCall getShortNameIDTerminalRuleCall_3_0() { return cShortNameIDTerminalRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//ports+=Port*
		public Assignment getPortsAssignment_6() { return cPortsAssignment_6; }
		
		//Port
		public RuleCall getPortsPortParserRuleCall_6_0() { return cPortsPortParserRuleCall_6_0; }
		
		//'mips'
		public Keyword getMipsKeyword_7() { return cMipsKeyword_7; }
		
		//':'
		public Keyword getColonKeyword_8() { return cColonKeyword_8; }
		
		//mips=ELong
		public Assignment getMipsAssignment_9() { return cMipsAssignment_9; }
		
		//ELong
		public RuleCall getMipsELongParserRuleCall_9_0() { return cMipsELongParserRuleCall_9_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	public class ConfigElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Sbsml.Config");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConfigKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNodesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNodesNodeParserRuleCall_3_0 = (RuleCall)cNodesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cConnectionsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cColonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cConnectionsAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cConnectionsConnectionParserRuleCall_4_3_0 = (RuleCall)cConnectionsAssignment_4_3.eContents().get(0);
		private final Group cGroup_4_4 = (Group)cGroup_4.eContents().get(4);
		private final Keyword cCommaKeyword_4_4_0 = (Keyword)cGroup_4_4.eContents().get(0);
		private final Assignment cConnectionsAssignment_4_4_1 = (Assignment)cGroup_4_4.eContents().get(1);
		private final RuleCall cConnectionsConnectionParserRuleCall_4_4_1_0 = (RuleCall)cConnectionsAssignment_4_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_5 = (Keyword)cGroup_4.eContents().get(5);
		private final Assignment cControllersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cControllersControllerParserRuleCall_5_0 = (RuleCall)cControllersAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Config Configuration:
		//	'config' name=ID '{'
		//	nodes+=Node* ('connections' ':' '{' connections+=Connection (',' connections+=Connection)* '}')?
		//	controllers+=Controller*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'config' name=ID '{' nodes+=Node* ('connections' ':' '{' connections+=Connection (',' connections+=Connection)* '}')?
		//controllers+=Controller* '}'
		public Group getGroup() { return cGroup; }
		
		//'config'
		public Keyword getConfigKeyword_0() { return cConfigKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//nodes+=Node*
		public Assignment getNodesAssignment_3() { return cNodesAssignment_3; }
		
		//Node
		public RuleCall getNodesNodeParserRuleCall_3_0() { return cNodesNodeParserRuleCall_3_0; }
		
		//('connections' ':' '{' connections+=Connection (',' connections+=Connection)* '}')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'connections'
		public Keyword getConnectionsKeyword_4_0() { return cConnectionsKeyword_4_0; }
		
		//':'
		public Keyword getColonKeyword_4_1() { return cColonKeyword_4_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_2() { return cLeftCurlyBracketKeyword_4_2; }
		
		//connections+=Connection
		public Assignment getConnectionsAssignment_4_3() { return cConnectionsAssignment_4_3; }
		
		//Connection
		public RuleCall getConnectionsConnectionParserRuleCall_4_3_0() { return cConnectionsConnectionParserRuleCall_4_3_0; }
		
		//(',' connections+=Connection)*
		public Group getGroup_4_4() { return cGroup_4_4; }
		
		//','
		public Keyword getCommaKeyword_4_4_0() { return cCommaKeyword_4_4_0; }
		
		//connections+=Connection
		public Assignment getConnectionsAssignment_4_4_1() { return cConnectionsAssignment_4_4_1; }
		
		//Connection
		public RuleCall getConnectionsConnectionParserRuleCall_4_4_1_0() { return cConnectionsConnectionParserRuleCall_4_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_5() { return cRightCurlyBracketKeyword_4_5; }
		
		//controllers+=Controller*
		public Assignment getControllersAssignment_5() { return cControllersAssignment_5; }
		
		//Controller
		public RuleCall getControllersControllerParserRuleCall_5_0() { return cControllersControllerParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class NodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Sbsml.Node");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNodeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cThingAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cThingThingCrossReference_3_0 = (CrossReference)cThingAssignment_3.eContents().get(0);
		private final RuleCall cThingThingIDTerminalRuleCall_3_0_1 = (RuleCall)cThingThingCrossReference_3_0.eContents().get(1);
		
		//Node:
		//	'node' name=ID ':' thing=[Thing];
		@Override public ParserRule getRule() { return rule; }
		
		//'node' name=ID ':' thing=[Thing]
		public Group getGroup() { return cGroup; }
		
		//'node'
		public Keyword getNodeKeyword_0() { return cNodeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//thing=[Thing]
		public Assignment getThingAssignment_3() { return cThingAssignment_3; }
		
		//[Thing]
		public CrossReference getThingThingCrossReference_3_0() { return cThingThingCrossReference_3_0; }
		
		//ID
		public RuleCall getThingThingIDTerminalRuleCall_3_0_1() { return cThingThingIDTerminalRuleCall_3_0_1; }
	}
	public class ConnectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Sbsml.Connection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNodeAAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNodeANodeCrossReference_0_0 = (CrossReference)cNodeAAssignment_0.eContents().get(0);
		private final RuleCall cNodeANodeIDTerminalRuleCall_0_0_1 = (RuleCall)cNodeANodeCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPortAAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cPortAPortCrossReference_2_0 = (CrossReference)cPortAAssignment_2.eContents().get(0);
		private final RuleCall cPortAPortIDTerminalRuleCall_2_0_1 = (RuleCall)cPortAPortCrossReference_2_0.eContents().get(1);
		private final Keyword cGreaterThanSignHyphenMinusLessThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNodeBAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cNodeBNodeCrossReference_4_0 = (CrossReference)cNodeBAssignment_4.eContents().get(0);
		private final RuleCall cNodeBNodeIDTerminalRuleCall_4_0_1 = (RuleCall)cNodeBNodeCrossReference_4_0.eContents().get(1);
		private final Keyword cFullStopKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cPortBAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cPortBPortCrossReference_6_0 = (CrossReference)cPortBAssignment_6.eContents().get(0);
		private final RuleCall cPortBPortIDTerminalRuleCall_6_0_1 = (RuleCall)cPortBPortCrossReference_6_0.eContents().get(1);
		
		//Connection:
		//	nodeA=[Node] '.' portA=[Port] '>-<' nodeB=[Node] '.' portB=[Port];
		@Override public ParserRule getRule() { return rule; }
		
		//nodeA=[Node] '.' portA=[Port] '>-<' nodeB=[Node] '.' portB=[Port]
		public Group getGroup() { return cGroup; }
		
		//nodeA=[Node]
		public Assignment getNodeAAssignment_0() { return cNodeAAssignment_0; }
		
		//[Node]
		public CrossReference getNodeANodeCrossReference_0_0() { return cNodeANodeCrossReference_0_0; }
		
		//ID
		public RuleCall getNodeANodeIDTerminalRuleCall_0_0_1() { return cNodeANodeIDTerminalRuleCall_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//portA=[Port]
		public Assignment getPortAAssignment_2() { return cPortAAssignment_2; }
		
		//[Port]
		public CrossReference getPortAPortCrossReference_2_0() { return cPortAPortCrossReference_2_0; }
		
		//ID
		public RuleCall getPortAPortIDTerminalRuleCall_2_0_1() { return cPortAPortIDTerminalRuleCall_2_0_1; }
		
		//'>-<'
		public Keyword getGreaterThanSignHyphenMinusLessThanSignKeyword_3() { return cGreaterThanSignHyphenMinusLessThanSignKeyword_3; }
		
		//nodeB=[Node]
		public Assignment getNodeBAssignment_4() { return cNodeBAssignment_4; }
		
		//[Node]
		public CrossReference getNodeBNodeCrossReference_4_0() { return cNodeBNodeCrossReference_4_0; }
		
		//ID
		public RuleCall getNodeBNodeIDTerminalRuleCall_4_0_1() { return cNodeBNodeIDTerminalRuleCall_4_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_5() { return cFullStopKeyword_5; }
		
		//portB=[Port]
		public Assignment getPortBAssignment_6() { return cPortBAssignment_6; }
		
		//[Port]
		public CrossReference getPortBPortCrossReference_6_0() { return cPortBPortCrossReference_6_0; }
		
		//ID
		public RuleCall getPortBPortIDTerminalRuleCall_6_0_1() { return cPortBPortIDTerminalRuleCall_6_0_1; }
	}
	public class ControllerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Sbsml.Controller");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cControllerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cComputedKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cOnKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cComputationNodeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cComputationNodeNodeCrossReference_4_0 = (CrossReference)cComputationNodeAssignment_4.eContents().get(0);
		private final RuleCall cComputationNodeNodeIDTerminalRuleCall_4_0_1 = (RuleCall)cComputationNodeNodeCrossReference_4_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cMipsKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cColonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cMipsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cMipsELongParserRuleCall_8_0 = (RuleCall)cMipsAssignment_8.eContents().get(0);
		private final Keyword cOnKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cColonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cLeftCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cThresholdAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cThresholdThresholdParserRuleCall_12_0 = (RuleCall)cThresholdAssignment_12.eContents().get(0);
		private final Group cGroup_13 = (Group)cGroup.eContents().get(13);
		private final Keyword cCommaKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final Assignment cThresholdAssignment_13_1 = (Assignment)cGroup_13.eContents().get(1);
		private final RuleCall cThresholdThresholdParserRuleCall_13_1_0 = (RuleCall)cThresholdAssignment_13_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Keyword cCallKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Keyword cColonKeyword_16 = (Keyword)cGroup.eContents().get(16);
		private final Keyword cLeftCurlyBracketKeyword_17 = (Keyword)cGroup.eContents().get(17);
		private final Group cGroup_18 = (Group)cGroup.eContents().get(18);
		private final Assignment cServicecallsAssignment_18_0 = (Assignment)cGroup_18.eContents().get(0);
		private final RuleCall cServicecallsServiceCallParserRuleCall_18_0_0 = (RuleCall)cServicecallsAssignment_18_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_18_1 = (Keyword)cGroup_18.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_19 = (Keyword)cGroup.eContents().get(19);
		private final Keyword cRightCurlyBracketKeyword_20 = (Keyword)cGroup.eContents().get(20);
		
		//Controller:
		//	'controller' name=ID 'computed' 'on' computationNode=[Node] '{'
		//	'mips' ':' mips=ELong
		//	'on' ':' '{'
		//	threshold+=Threshold (',' threshold+=Threshold)*
		//	'}'
		//	'call' ':' '{' (servicecalls+=ServiceCall ';')*
		//	'}'
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'controller' name=ID 'computed' 'on' computationNode=[Node] '{' 'mips' ':' mips=ELong 'on' ':' '{' threshold+=Threshold
		//(',' threshold+=Threshold)* '}' 'call' ':' '{' (servicecalls+=ServiceCall ';')* '}' '}'
		public Group getGroup() { return cGroup; }
		
		//'controller'
		public Keyword getControllerKeyword_0() { return cControllerKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'computed'
		public Keyword getComputedKeyword_2() { return cComputedKeyword_2; }
		
		//'on'
		public Keyword getOnKeyword_3() { return cOnKeyword_3; }
		
		//computationNode=[Node]
		public Assignment getComputationNodeAssignment_4() { return cComputationNodeAssignment_4; }
		
		//[Node]
		public CrossReference getComputationNodeNodeCrossReference_4_0() { return cComputationNodeNodeCrossReference_4_0; }
		
		//ID
		public RuleCall getComputationNodeNodeIDTerminalRuleCall_4_0_1() { return cComputationNodeNodeIDTerminalRuleCall_4_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//'mips'
		public Keyword getMipsKeyword_6() { return cMipsKeyword_6; }
		
		//':'
		public Keyword getColonKeyword_7() { return cColonKeyword_7; }
		
		//mips=ELong
		public Assignment getMipsAssignment_8() { return cMipsAssignment_8; }
		
		//ELong
		public RuleCall getMipsELongParserRuleCall_8_0() { return cMipsELongParserRuleCall_8_0; }
		
		//'on'
		public Keyword getOnKeyword_9() { return cOnKeyword_9; }
		
		//':'
		public Keyword getColonKeyword_10() { return cColonKeyword_10; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_11() { return cLeftCurlyBracketKeyword_11; }
		
		//threshold+=Threshold
		public Assignment getThresholdAssignment_12() { return cThresholdAssignment_12; }
		
		//Threshold
		public RuleCall getThresholdThresholdParserRuleCall_12_0() { return cThresholdThresholdParserRuleCall_12_0; }
		
		//(',' threshold+=Threshold)*
		public Group getGroup_13() { return cGroup_13; }
		
		//','
		public Keyword getCommaKeyword_13_0() { return cCommaKeyword_13_0; }
		
		//threshold+=Threshold
		public Assignment getThresholdAssignment_13_1() { return cThresholdAssignment_13_1; }
		
		//Threshold
		public RuleCall getThresholdThresholdParserRuleCall_13_1_0() { return cThresholdThresholdParserRuleCall_13_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_14() { return cRightCurlyBracketKeyword_14; }
		
		//'call'
		public Keyword getCallKeyword_15() { return cCallKeyword_15; }
		
		//':'
		public Keyword getColonKeyword_16() { return cColonKeyword_16; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_17() { return cLeftCurlyBracketKeyword_17; }
		
		//(servicecalls+=ServiceCall ';')*
		public Group getGroup_18() { return cGroup_18; }
		
		//servicecalls+=ServiceCall
		public Assignment getServicecallsAssignment_18_0() { return cServicecallsAssignment_18_0; }
		
		//ServiceCall
		public RuleCall getServicecallsServiceCallParserRuleCall_18_0_0() { return cServicecallsServiceCallParserRuleCall_18_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_18_1() { return cSemicolonKeyword_18_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_19() { return cRightCurlyBracketKeyword_19; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_20() { return cRightCurlyBracketKeyword_20; }
	}
	public class ThresholdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Sbsml.Threshold");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntThresholdParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFloatThresholdParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBoolThresholdParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Threshold:
		//	IntThreshold | FloatThreshold | BoolThreshold;
		@Override public ParserRule getRule() { return rule; }
		
		//IntThreshold | FloatThreshold | BoolThreshold
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntThreshold
		public RuleCall getIntThresholdParserRuleCall_0() { return cIntThresholdParserRuleCall_0; }
		
		//FloatThreshold
		public RuleCall getFloatThresholdParserRuleCall_1() { return cFloatThresholdParserRuleCall_1; }
		
		//BoolThreshold
		public RuleCall getBoolThresholdParserRuleCall_2() { return cBoolThresholdParserRuleCall_2; }
	}
	public class IntThresholdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Sbsml.IntThreshold");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIntThresholdKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSourceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSourceNodeCrossReference_2_0 = (CrossReference)cSourceAssignment_2.eContents().get(0);
		private final RuleCall cSourceNodeIDTerminalRuleCall_2_0_1 = (RuleCall)cSourceNodeCrossReference_2_0.eContents().get(1);
		private final Keyword cFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cParameterAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cParameterParameterCrossReference_4_0 = (CrossReference)cParameterAssignment_4.eContents().get(0);
		private final RuleCall cParameterParameterIDTerminalRuleCall_4_0_1 = (RuleCall)cParameterParameterCrossReference_4_0.eContents().get(1);
		private final Assignment cComperatorAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cComperatorComparatorEnumRuleCall_5_0 = (RuleCall)cComperatorAssignment_5.eContents().get(0);
		private final Assignment cValueAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cValueINTTerminalRuleCall_6_0 = (RuleCall)cValueAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//IntThreshold:
		//	'IntThreshold' '(' source=[Node] '.' parameter=[Parameter] comperator=Comparator value=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'IntThreshold' '(' source=[Node] '.' parameter=[Parameter] comperator=Comparator value=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'IntThreshold'
		public Keyword getIntThresholdKeyword_0() { return cIntThresholdKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//source=[Node]
		public Assignment getSourceAssignment_2() { return cSourceAssignment_2; }
		
		//[Node]
		public CrossReference getSourceNodeCrossReference_2_0() { return cSourceNodeCrossReference_2_0; }
		
		//ID
		public RuleCall getSourceNodeIDTerminalRuleCall_2_0_1() { return cSourceNodeIDTerminalRuleCall_2_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }
		
		//parameter=[Parameter]
		public Assignment getParameterAssignment_4() { return cParameterAssignment_4; }
		
		//[Parameter]
		public CrossReference getParameterParameterCrossReference_4_0() { return cParameterParameterCrossReference_4_0; }
		
		//ID
		public RuleCall getParameterParameterIDTerminalRuleCall_4_0_1() { return cParameterParameterIDTerminalRuleCall_4_0_1; }
		
		//comperator=Comparator
		public Assignment getComperatorAssignment_5() { return cComperatorAssignment_5; }
		
		//Comparator
		public RuleCall getComperatorComparatorEnumRuleCall_5_0() { return cComperatorComparatorEnumRuleCall_5_0; }
		
		//value=INT
		public Assignment getValueAssignment_6() { return cValueAssignment_6; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_6_0() { return cValueINTTerminalRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class FloatThresholdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Sbsml.FloatThreshold");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFloatThresholdKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSourceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSourceNodeCrossReference_2_0 = (CrossReference)cSourceAssignment_2.eContents().get(0);
		private final RuleCall cSourceNodeIDTerminalRuleCall_2_0_1 = (RuleCall)cSourceNodeCrossReference_2_0.eContents().get(1);
		private final Keyword cFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cParameterAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cParameterParameterCrossReference_4_0 = (CrossReference)cParameterAssignment_4.eContents().get(0);
		private final RuleCall cParameterParameterIDTerminalRuleCall_4_0_1 = (RuleCall)cParameterParameterCrossReference_4_0.eContents().get(1);
		private final Assignment cComperatorAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cComperatorComparatorEnumRuleCall_5_0 = (RuleCall)cComperatorAssignment_5.eContents().get(0);
		private final Assignment cValueAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cValueFLOATTerminalRuleCall_6_0 = (RuleCall)cValueAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//FloatThreshold:
		//	'FloatThreshold' '(' source=[Node] '.' parameter=[Parameter] comperator=Comparator value=FLOAT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'FloatThreshold' '(' source=[Node] '.' parameter=[Parameter] comperator=Comparator value=FLOAT ')'
		public Group getGroup() { return cGroup; }
		
		//'FloatThreshold'
		public Keyword getFloatThresholdKeyword_0() { return cFloatThresholdKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//source=[Node]
		public Assignment getSourceAssignment_2() { return cSourceAssignment_2; }
		
		//[Node]
		public CrossReference getSourceNodeCrossReference_2_0() { return cSourceNodeCrossReference_2_0; }
		
		//ID
		public RuleCall getSourceNodeIDTerminalRuleCall_2_0_1() { return cSourceNodeIDTerminalRuleCall_2_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }
		
		//parameter=[Parameter]
		public Assignment getParameterAssignment_4() { return cParameterAssignment_4; }
		
		//[Parameter]
		public CrossReference getParameterParameterCrossReference_4_0() { return cParameterParameterCrossReference_4_0; }
		
		//ID
		public RuleCall getParameterParameterIDTerminalRuleCall_4_0_1() { return cParameterParameterIDTerminalRuleCall_4_0_1; }
		
		//comperator=Comparator
		public Assignment getComperatorAssignment_5() { return cComperatorAssignment_5; }
		
		//Comparator
		public RuleCall getComperatorComparatorEnumRuleCall_5_0() { return cComperatorComparatorEnumRuleCall_5_0; }
		
		//value=FLOAT
		public Assignment getValueAssignment_6() { return cValueAssignment_6; }
		
		//FLOAT
		public RuleCall getValueFLOATTerminalRuleCall_6_0() { return cValueFLOATTerminalRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class BoolThresholdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Sbsml.BoolThreshold");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBoolThresholdKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSourceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSourceNodeCrossReference_2_0 = (CrossReference)cSourceAssignment_2.eContents().get(0);
		private final RuleCall cSourceNodeIDTerminalRuleCall_2_0_1 = (RuleCall)cSourceNodeCrossReference_2_0.eContents().get(1);
		private final Keyword cFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cParameterAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cParameterParameterCrossReference_4_0 = (CrossReference)cParameterAssignment_4.eContents().get(0);
		private final RuleCall cParameterParameterIDTerminalRuleCall_4_0_1 = (RuleCall)cParameterParameterCrossReference_4_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTriggerOnAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTriggerOnBOOLTerminalRuleCall_6_0 = (RuleCall)cTriggerOnAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//BoolThreshold:
		//	'BoolThreshold' '(' source=[Node] '.' parameter=[Parameter] '=' triggerOn=BOOL ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'BoolThreshold' '(' source=[Node] '.' parameter=[Parameter] '=' triggerOn=BOOL ')'
		public Group getGroup() { return cGroup; }
		
		//'BoolThreshold'
		public Keyword getBoolThresholdKeyword_0() { return cBoolThresholdKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//source=[Node]
		public Assignment getSourceAssignment_2() { return cSourceAssignment_2; }
		
		//[Node]
		public CrossReference getSourceNodeCrossReference_2_0() { return cSourceNodeCrossReference_2_0; }
		
		//ID
		public RuleCall getSourceNodeIDTerminalRuleCall_2_0_1() { return cSourceNodeIDTerminalRuleCall_2_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }
		
		//parameter=[Parameter]
		public Assignment getParameterAssignment_4() { return cParameterAssignment_4; }
		
		//[Parameter]
		public CrossReference getParameterParameterCrossReference_4_0() { return cParameterParameterCrossReference_4_0; }
		
		//ID
		public RuleCall getParameterParameterIDTerminalRuleCall_4_0_1() { return cParameterParameterIDTerminalRuleCall_4_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_5() { return cEqualsSignKeyword_5; }
		
		//triggerOn=BOOL
		public Assignment getTriggerOnAssignment_6() { return cTriggerOnAssignment_6; }
		
		//BOOL
		public RuleCall getTriggerOnBOOLTerminalRuleCall_6_0() { return cTriggerOnBOOLTerminalRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class ServiceCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Sbsml.ServiceCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNodeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNodeNodeCrossReference_0_0 = (CrossReference)cNodeAssignment_0.eContents().get(0);
		private final RuleCall cNodeNodeIDTerminalRuleCall_0_0_1 = (RuleCall)cNodeNodeCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cServiceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cServiceServiceCrossReference_2_0 = (CrossReference)cServiceAssignment_2.eContents().get(0);
		private final RuleCall cServiceServiceIDTerminalRuleCall_2_0_1 = (RuleCall)cServiceServiceCrossReference_2_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cArgumentsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cArgumentsArgumentParserRuleCall_4_0_0 = (RuleCall)cArgumentsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cArgumentsArgumentParserRuleCall_4_1_1_0 = (RuleCall)cArgumentsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ServiceCall:
		//	node=[Node] '.' service=[Service] '(' (arguments+=Argument (',' arguments+=Argument)*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//node=[Node] '.' service=[Service] '(' (arguments+=Argument (',' arguments+=Argument)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//node=[Node]
		public Assignment getNodeAssignment_0() { return cNodeAssignment_0; }
		
		//[Node]
		public CrossReference getNodeNodeCrossReference_0_0() { return cNodeNodeCrossReference_0_0; }
		
		//ID
		public RuleCall getNodeNodeIDTerminalRuleCall_0_0_1() { return cNodeNodeIDTerminalRuleCall_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//service=[Service]
		public Assignment getServiceAssignment_2() { return cServiceAssignment_2; }
		
		//[Service]
		public CrossReference getServiceServiceCrossReference_2_0() { return cServiceServiceCrossReference_2_0; }
		
		//ID
		public RuleCall getServiceServiceIDTerminalRuleCall_2_0_1() { return cServiceServiceIDTerminalRuleCall_2_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//(arguments+=Argument (',' arguments+=Argument)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//arguments+=Argument
		public Assignment getArgumentsAssignment_4_0() { return cArgumentsAssignment_4_0; }
		
		//Argument
		public RuleCall getArgumentsArgumentParserRuleCall_4_0_0() { return cArgumentsArgumentParserRuleCall_4_0_0; }
		
		//(',' arguments+=Argument)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//arguments+=Argument
		public Assignment getArgumentsAssignment_4_1_1() { return cArgumentsAssignment_4_1_1; }
		
		//Argument
		public RuleCall getArgumentsArgumentParserRuleCall_4_1_1_0() { return cArgumentsArgumentParserRuleCall_4_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class ArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Sbsml.Argument");
		private final Assignment cStringValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStringValueArgParserRuleCall_0 = (RuleCall)cStringValueAssignment.eContents().get(0);
		
		//Argument:
		//	stringValue=Arg;
		@Override public ParserRule getRule() { return rule; }
		
		//stringValue=Arg
		public Assignment getStringValueAssignment() { return cStringValueAssignment; }
		
		//Arg
		public RuleCall getStringValueArgParserRuleCall_0() { return cStringValueArgParserRuleCall_0; }
	}
	public class ArgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Sbsml.Arg");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFLOATTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBOOLTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Arg:
		//	INT | FLOAT | BOOL;
		@Override public ParserRule getRule() { return rule; }
		
		//INT | FLOAT | BOOL
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//FLOAT
		public RuleCall getFLOATTerminalRuleCall_1() { return cFLOATTerminalRuleCall_1; }
		
		//BOOL
		public RuleCall getBOOLTerminalRuleCall_2() { return cBOOLTerminalRuleCall_2; }
	}
	public class ELongElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Sbsml.ELong");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ELong ecore::ELong:
		//	INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	
	public class DataTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Sbsml.DataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cINTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cINTIntKeyword_0_0 = (Keyword)cINTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFLOATEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFLOATFloatKeyword_1_0 = (Keyword)cFLOATEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBOOLEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBOOLBoolKeyword_2_0 = (Keyword)cBOOLEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum DataType:
		//	INT='int' | FLOAT='float' | BOOL='bool';
		public EnumRule getRule() { return rule; }
		
		//INT='int' | FLOAT='float' | BOOL='bool'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT='int'
		public EnumLiteralDeclaration getINTEnumLiteralDeclaration_0() { return cINTEnumLiteralDeclaration_0; }
		
		//'int'
		public Keyword getINTIntKeyword_0_0() { return cINTIntKeyword_0_0; }
		
		//FLOAT='float'
		public EnumLiteralDeclaration getFLOATEnumLiteralDeclaration_1() { return cFLOATEnumLiteralDeclaration_1; }
		
		//'float'
		public Keyword getFLOATFloatKeyword_1_0() { return cFLOATFloatKeyword_1_0; }
		
		//BOOL='bool'
		public EnumLiteralDeclaration getBOOLEnumLiteralDeclaration_2() { return cBOOLEnumLiteralDeclaration_2; }
		
		//'bool'
		public Keyword getBOOLBoolKeyword_2_0() { return cBOOLBoolKeyword_2_0; }
	}
	public class ComparatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Sbsml.Comparator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cGREATEREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cGREATERGreaterThanSignKeyword_0_0 = (Keyword)cGREATEREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSMALLEREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSMALLERLessThanSignKeyword_1_0 = (Keyword)cSMALLEREnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Comparator:
		//	GREATER='>' | SMALLER='<';
		public EnumRule getRule() { return rule; }
		
		//GREATER='>' | SMALLER='<'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//GREATER='>'
		public EnumLiteralDeclaration getGREATEREnumLiteralDeclaration_0() { return cGREATEREnumLiteralDeclaration_0; }
		
		//'>'
		public Keyword getGREATERGreaterThanSignKeyword_0_0() { return cGREATERGreaterThanSignKeyword_0_0; }
		
		//SMALLER='<'
		public EnumLiteralDeclaration getSMALLEREnumLiteralDeclaration_1() { return cSMALLEREnumLiteralDeclaration_1; }
		
		//'<'
		public Keyword getSMALLERLessThanSignKeyword_1_0() { return cSMALLERLessThanSignKeyword_1_0; }
	}
	
	private final SmartSystemElements pSmartSystem;
	private final UnitElements pUnit;
	private final ThingElements pThing;
	private final PortElements pPort;
	private final SensorElements pSensor;
	private final SensorParamElements pSensorParam;
	private final ParameterElements pParameter;
	private final ActuatorElements pActuator;
	private final ServiceElements pService;
	private final FogDeviceElements pFogDevice;
	private final ConfigElements pConfig;
	private final NodeElements pNode;
	private final ConnectionElements pConnection;
	private final ControllerElements pController;
	private final ThresholdElements pThreshold;
	private final IntThresholdElements pIntThreshold;
	private final FloatThresholdElements pFloatThreshold;
	private final BoolThresholdElements pBoolThreshold;
	private final ServiceCallElements pServiceCall;
	private final ArgumentElements pArgument;
	private final ArgElements pArg;
	private final ELongElements pELong;
	private final DataTypeElements eDataType;
	private final ComparatorElements eComparator;
	private final TerminalRule tFLOAT;
	private final TerminalRule tBOOL;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SbsmlGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSmartSystem = new SmartSystemElements();
		this.pUnit = new UnitElements();
		this.pThing = new ThingElements();
		this.pPort = new PortElements();
		this.pSensor = new SensorElements();
		this.pSensorParam = new SensorParamElements();
		this.pParameter = new ParameterElements();
		this.pActuator = new ActuatorElements();
		this.pService = new ServiceElements();
		this.pFogDevice = new FogDeviceElements();
		this.pConfig = new ConfigElements();
		this.pNode = new NodeElements();
		this.pConnection = new ConnectionElements();
		this.pController = new ControllerElements();
		this.pThreshold = new ThresholdElements();
		this.pIntThreshold = new IntThresholdElements();
		this.pFloatThreshold = new FloatThresholdElements();
		this.pBoolThreshold = new BoolThresholdElements();
		this.pServiceCall = new ServiceCallElements();
		this.pArgument = new ArgumentElements();
		this.pArg = new ArgElements();
		this.pELong = new ELongElements();
		this.eDataType = new DataTypeElements();
		this.eComparator = new ComparatorElements();
		this.tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Sbsml.FLOAT");
		this.tBOOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.Sbsml.BOOL");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("at.ac.tuwien.big.Sbsml".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//SmartSystem:
	//	'system' name=ID '{' ('units' '{' (units+=Unit (',' units+=Unit)*)? '}')? (things+=Thing | configs+=Config)*
	//	'}';
	public SmartSystemElements getSmartSystemAccess() {
		return pSmartSystem;
	}
	
	public ParserRule getSmartSystemRule() {
		return getSmartSystemAccess().getRule();
	}
	
	//Unit:
	//	name=ID ('(' abbreviation=STRING ')')? ':' type=DataType;
	public UnitElements getUnitAccess() {
		return pUnit;
	}
	
	public ParserRule getUnitRule() {
		return getUnitAccess().getRule();
	}
	
	//Thing:
	//	Sensor | Actuator | FogDevice;
	public ThingElements getThingAccess() {
		return pThing;
	}
	
	public ParserRule getThingRule() {
		return getThingAccess().getRule();
	}
	
	//Port:
	//	singleConnection?='single'? 'port' name=ID;
	public PortElements getPortAccess() {
		return pPort;
	}
	
	public ParserRule getPortRule() {
		return getPortAccess().getRule();
	}
	
	//Sensor:
	//	'sensor' name=ID '(' shortName=ID ')' '{'
	//	ports+=Port*
	//	parameters+=SensorParam*
	//	'}';
	public SensorElements getSensorAccess() {
		return pSensor;
	}
	
	public ParserRule getSensorRule() {
		return getSensorAccess().getRule();
	}
	
	//SensorParam Parameter:
	//	'param' name=ID ':' unit=[Unit];
	public SensorParamElements getSensorParamAccess() {
		return pSensorParam;
	}
	
	public ParserRule getSensorParamRule() {
		return getSensorParamAccess().getRule();
	}
	
	//Parameter:
	//	name=ID ':' unit=[Unit];
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//Actuator:
	//	'actuator' name=ID '(' shortName=ID ')' '{'
	//	ports+=Port*
	//	services+=Service*
	//	'}';
	public ActuatorElements getActuatorAccess() {
		return pActuator;
	}
	
	public ParserRule getActuatorRule() {
		return getActuatorAccess().getRule();
	}
	
	//Service:
	//	'service' name=ID '(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')' ('--' description=STRING)?;
	public ServiceElements getServiceAccess() {
		return pService;
	}
	
	public ParserRule getServiceRule() {
		return getServiceAccess().getRule();
	}
	
	//FogDevice:
	//	'fogdevice' name=ID '(' shortName=ID ')' '{'
	//	ports+=Port*
	//	'mips' ':' mips=ELong
	//	'}';
	public FogDeviceElements getFogDeviceAccess() {
		return pFogDevice;
	}
	
	public ParserRule getFogDeviceRule() {
		return getFogDeviceAccess().getRule();
	}
	
	//Config Configuration:
	//	'config' name=ID '{'
	//	nodes+=Node* ('connections' ':' '{' connections+=Connection (',' connections+=Connection)* '}')?
	//	controllers+=Controller*
	//	'}';
	public ConfigElements getConfigAccess() {
		return pConfig;
	}
	
	public ParserRule getConfigRule() {
		return getConfigAccess().getRule();
	}
	
	//Node:
	//	'node' name=ID ':' thing=[Thing];
	public NodeElements getNodeAccess() {
		return pNode;
	}
	
	public ParserRule getNodeRule() {
		return getNodeAccess().getRule();
	}
	
	//Connection:
	//	nodeA=[Node] '.' portA=[Port] '>-<' nodeB=[Node] '.' portB=[Port];
	public ConnectionElements getConnectionAccess() {
		return pConnection;
	}
	
	public ParserRule getConnectionRule() {
		return getConnectionAccess().getRule();
	}
	
	//Controller:
	//	'controller' name=ID 'computed' 'on' computationNode=[Node] '{'
	//	'mips' ':' mips=ELong
	//	'on' ':' '{'
	//	threshold+=Threshold (',' threshold+=Threshold)*
	//	'}'
	//	'call' ':' '{' (servicecalls+=ServiceCall ';')*
	//	'}'
	//	'}';
	public ControllerElements getControllerAccess() {
		return pController;
	}
	
	public ParserRule getControllerRule() {
		return getControllerAccess().getRule();
	}
	
	//Threshold:
	//	IntThreshold | FloatThreshold | BoolThreshold;
	public ThresholdElements getThresholdAccess() {
		return pThreshold;
	}
	
	public ParserRule getThresholdRule() {
		return getThresholdAccess().getRule();
	}
	
	//IntThreshold:
	//	'IntThreshold' '(' source=[Node] '.' parameter=[Parameter] comperator=Comparator value=INT ')';
	public IntThresholdElements getIntThresholdAccess() {
		return pIntThreshold;
	}
	
	public ParserRule getIntThresholdRule() {
		return getIntThresholdAccess().getRule();
	}
	
	//FloatThreshold:
	//	'FloatThreshold' '(' source=[Node] '.' parameter=[Parameter] comperator=Comparator value=FLOAT ')';
	public FloatThresholdElements getFloatThresholdAccess() {
		return pFloatThreshold;
	}
	
	public ParserRule getFloatThresholdRule() {
		return getFloatThresholdAccess().getRule();
	}
	
	//BoolThreshold:
	//	'BoolThreshold' '(' source=[Node] '.' parameter=[Parameter] '=' triggerOn=BOOL ')';
	public BoolThresholdElements getBoolThresholdAccess() {
		return pBoolThreshold;
	}
	
	public ParserRule getBoolThresholdRule() {
		return getBoolThresholdAccess().getRule();
	}
	
	//ServiceCall:
	//	node=[Node] '.' service=[Service] '(' (arguments+=Argument (',' arguments+=Argument)*)? ')';
	public ServiceCallElements getServiceCallAccess() {
		return pServiceCall;
	}
	
	public ParserRule getServiceCallRule() {
		return getServiceCallAccess().getRule();
	}
	
	//Argument:
	//	stringValue=Arg;
	public ArgumentElements getArgumentAccess() {
		return pArgument;
	}
	
	public ParserRule getArgumentRule() {
		return getArgumentAccess().getRule();
	}
	
	//Arg:
	//	INT | FLOAT | BOOL;
	public ArgElements getArgAccess() {
		return pArg;
	}
	
	public ParserRule getArgRule() {
		return getArgAccess().getRule();
	}
	
	//ELong ecore::ELong:
	//	INT;
	public ELongElements getELongAccess() {
		return pELong;
	}
	
	public ParserRule getELongRule() {
		return getELongAccess().getRule();
	}
	
	//enum DataType:
	//	INT='int' | FLOAT='float' | BOOL='bool';
	public DataTypeElements getDataTypeAccess() {
		return eDataType;
	}
	
	public EnumRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}
	
	//enum Comparator:
	//	GREATER='>' | SMALLER='<';
	public ComparatorElements getComparatorAccess() {
		return eComparator;
	}
	
	public EnumRule getComparatorRule() {
		return getComparatorAccess().getRule();
	}
	
	//terminal FLOAT returns ecore::EDouble:
	//	'-'? '0'..'9'* '.' '0'..'9'+ (('E' | 'e') '-'? '0'..'9'+)?;
	public TerminalRule getFLOATRule() {
		return tFLOAT;
	}
	
	//terminal BOOL returns ecore::EBoolean:
	//	'true' | 'false';
	public TerminalRule getBOOLRule() {
		return tBOOL;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
