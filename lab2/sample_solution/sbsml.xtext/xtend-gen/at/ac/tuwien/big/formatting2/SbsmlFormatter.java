/**
 * generated by Xtext 2.23.0.M2
 */
package at.ac.tuwien.big.formatting2;

import at.ac.tuwien.big.services.SbsmlGrammarAccess;
import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import sbsml.Configuration;
import sbsml.Parameter;
import sbsml.Port;
import sbsml.Sensor;
import sbsml.SmartSystem;
import sbsml.Thing;
import sbsml.Unit;

@SuppressWarnings("all")
public class SbsmlFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private SbsmlGrammarAccess _sbsmlGrammarAccess;
  
  protected void _format(final SmartSystem smartSystem, @Extension final IFormattableDocument document) {
    EList<Unit> _units = smartSystem.getUnits();
    for (final Unit unit : _units) {
      document.<Unit>format(unit);
    }
    EList<Thing> _things = smartSystem.getThings();
    for (final Thing thing : _things) {
      document.<Thing>format(thing);
    }
    EList<Configuration> _configs = smartSystem.getConfigs();
    for (final Configuration configuration : _configs) {
      document.<Configuration>format(configuration);
    }
  }
  
  protected void _format(final Sensor sensor, @Extension final IFormattableDocument document) {
    EList<Port> _ports = sensor.getPorts();
    for (final Port port : _ports) {
      document.<Port>format(port);
    }
    EList<Parameter> _parameters = sensor.getParameters();
    for (final Parameter parameter : _parameters) {
      document.<Parameter>format(parameter);
    }
  }
  
  public void format(final Object sensor, final IFormattableDocument document) {
    if (sensor instanceof XtextResource) {
      _format((XtextResource)sensor, document);
      return;
    } else if (sensor instanceof Sensor) {
      _format((Sensor)sensor, document);
      return;
    } else if (sensor instanceof SmartSystem) {
      _format((SmartSystem)sensor, document);
      return;
    } else if (sensor instanceof EObject) {
      _format((EObject)sensor, document);
      return;
    } else if (sensor == null) {
      _format((Void)null, document);
      return;
    } else if (sensor != null) {
      _format(sensor, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(sensor, document).toString());
    }
  }
}
